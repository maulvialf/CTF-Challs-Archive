{"version":3,"sources":["components/common/forms/components/BaseButtonsGroup/BaseButtonsGroup.tsx","components/common/forms/BaseButtonsForm/BaseButtonsForm.tsx","components/common/Upload/Upload.styles.ts","components/common/Upload/Upload.tsx","components/forms/ExamForm/ExamForm.tsx","pages/CreateExamPage.tsx"],"names":["BaseButtonsGroup","_ref","className","onCancel","loading","props","_objectWithoutProperties","_excluded","t","useTranslation","_jsxs","Row","gutter","wrap","children","_jsx","Col","span","Button","_objectSpread","block","type","onClick","htmlType","BaseButtonsForm","form","isFieldsChanged","setFieldsChanged","footer","_ref$loading","_BaseForm$useForm","BaseForm","useForm","formDefault","_slicedToArray","currentForm","resetFields","Title","BaseFormTitle","Item","BaseFormItem","List","BaseFormList","Provider","Upload","styled","AntdUpload","_templateObject","_taggedTemplateLiteral","Dragger","S","Text","Typography","formItemLayout","labelCol","wrapperCol","normFile","e","Array","isArray","fileList","ExamForm","_Form$useForm","Form","_useState","useState","_useState2","isLoading","setLoading","dispatch","useAppDispatch","navigate","useNavigate","onFinish","_asyncToGenerator","_regeneratorRuntime","mark","_callee","values","postData","_args","arguments","_context","prev","next","length","undefined","name","time_limit","duration","question_file","upload","doCreate","unwrap","then","setTimeout","notificationController","success","message","catch","err","error","stop","apply","uploadProps","action","headers","authorization","concat","readToken","onChange","info","file","status","console","log","setFieldsValue","initialValues","label","rules","required","Input","placeholder","InputNumber","min","max","valuePropName","getValueFromEvent","icon","UploadOutlined","italic","style","fontSize","href","target","CreateExamPage","_Fragment","PageTitle","xs","sm","xl","Card","id","title","padding"],"mappings":"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","file":"static/js/15.8fc435e5.chunk.js","sourcesContent":["import React, { ComponentProps } from 'react';\nimport { Col, Row } from 'antd';\nimport { Button } from '@app/components/common/buttons/Button/Button';\nimport { useTranslation } from 'react-i18next';\n\ninterface BaseButtonsGroupProps extends ComponentProps<typeof Button> {\n  className?: string;\n  onCancel: () => void;\n  loading?: boolean;\n}\n\nexport const BaseButtonsGroup: React.FC<BaseButtonsGroupProps> = ({ className, onCancel, loading, ...props }) => {\n  const { t } = useTranslation();\n\n  return (\n    <Row className={className} gutter={[10, 10]} wrap={false}>\n      <Col span={12}>\n        <Button block type=\"ghost\" onClick={onCancel} {...props}>\n          {t('common.cancel')}\n        </Button>\n      </Col>\n      <Col span={12}>\n        <Button block type=\"primary\" loading={loading} htmlType=\"submit\" {...props}>\n          {t('common.save')}\n        </Button>\n      </Col>\n    </Row>\n  );\n};\n","import React from 'react';\nimport { BaseForm, BaseFormInterface, BaseFormProps } from '@app/components/common/forms//BaseForm/BaseForm';\nimport { BaseButtonsGroup } from '@app/components/common/forms/components/BaseButtonsGroup/BaseButtonsGroup';\nimport { BaseFormTitle } from '@app/components/common/forms/components/BaseFormTitle/BaseFormTitle';\nimport { BaseFormItem } from '@app/components/common/forms/components/BaseFormItem/BaseFormItem';\nimport { BaseFormList } from '@app/components/common/forms/components/BaseFormList/BaseFormList';\n\nexport interface BaseButtonsFormProps extends BaseFormProps {\n  isFieldsChanged: boolean;\n  setFieldsChanged?: (state: boolean) => void;\n  footer?: React.ReactElement;\n  loading?: boolean;\n}\n\nexport const BaseButtonsForm: BaseFormInterface<BaseButtonsFormProps> = ({\n  form,\n  isFieldsChanged,\n  setFieldsChanged,\n  footer,\n  loading = false,\n  children,\n  ...props\n}) => {\n  const [formDefault] = BaseForm.useForm();\n  const currentForm = form || formDefault;\n\n  const onCancel = () => {\n    currentForm?.resetFields();\n    setFieldsChanged && setFieldsChanged(false);\n  };\n\n  return (\n    <BaseForm form={currentForm} {...props}>\n      {children}\n      {isFieldsChanged && (footer || <BaseButtonsGroup loading={loading} onCancel={onCancel} />)}\n    </BaseForm>\n  );\n};\n\nBaseButtonsForm.Title = BaseFormTitle;\nBaseButtonsForm.Item = BaseFormItem;\nBaseButtonsForm.List = BaseFormList;\nBaseButtonsForm.useForm = BaseForm.useForm;\nBaseButtonsForm.Provider = BaseForm.Provider;\n","import styled from 'styled-components';\nimport { Upload as AntdUpload } from 'antd';\n\nexport const Upload = styled(AntdUpload)``;\n","import { Upload as AntdUpload, UploadProps } from 'antd';\nimport * as S from './Upload.styles';\n\nexport const { Dragger: UploadDragger } = AntdUpload;\n\nexport const Upload: React.FC<UploadProps> = (props) => {\n  return <S.Upload {...props} />;\n};\n","import { useTranslation } from 'react-i18next';\nimport { UploadOutlined } from '@ant-design/icons';\nimport { useState } from 'react';\nimport { BaseButtonsForm } from '@app/components/common/forms/BaseButtonsForm/BaseButtonsForm';\nimport { Button } from '@app/components/common/buttons/Button/Button';\nimport { Upload } from '@app/components/common/Upload/Upload';\nimport { notificationController } from '@app/controllers/notificationController';\nimport { Input } from '@app/components/common/inputs/Input/Input';\nimport { InputNumber } from '@app/components/common/inputs/InputNumber/InputNumber';\nimport { Form, Typography, UploadProps } from 'antd';\nimport { readToken } from '@app/services/localStorage.service';\nimport { useAppDispatch } from '@app/hooks/reduxHooks';\nimport { doCreate } from '@app/store/slices/examSlice';\nimport { CreateExamRequest } from '@app/api/exam.api';\nimport { useNavigate } from 'react-router-dom';\nconst { Text } = Typography;\n\nconst formItemLayout = {\n  labelCol: { span: 24 },\n  wrapperCol: { span: 24 },\n};\n\nconst normFile = (e: { fileList: [] }) => {\n  if (Array.isArray(e)) {\n    return e;\n  }\n  return e?.fileList;\n};\n\nexport const ExamForm: React.FC = () => {\n  const [form] = Form.useForm();\n  const [isLoading, setLoading] = useState(false);\n  const { t } = useTranslation();\n  const dispatch = useAppDispatch();\n  const navigate = useNavigate();\n\n  const onFinish = async (values = {} as Record<string, unknown>) => {\n    setLoading(true);\n    const postData = {\n      name: values.name,\n      time_limit: values.duration,\n      question_file: values.upload,\n    };\n    dispatch(doCreate(postData as CreateExamRequest))\n      .unwrap()\n      .then(() => {\n        setTimeout(() => {\n          setLoading(false);\n          notificationController.success({ message: t('common.success') });\n        }, 1000);\n        navigate('/exam/list');\n      })\n      .catch((err) => {\n        notificationController.error({ message: err.message });\n      });\n  };\n\n  const uploadProps: UploadProps = {\n    name: 'file',\n    action: '/api/v1/exam/upload',\n    headers: {\n      authorization: `Bearer ${readToken()}`,\n    },\n    onChange(info) {\n      if (info.file.status !== 'uploading') {\n        console.log(info.file, info.fileList);\n      }\n      if (info.file.status === 'done') {\n        form.setFieldsValue({\n          upload: info.file.name,\n        });\n        notificationController.success({ message: `${info.file.name} file uploaded successfully` });\n      } else if (info.file.status === 'error') {\n        notificationController.error({ message: `${info.file.name} file upload failed.` });\n      }\n    },\n  };\n\n  return (\n    <BaseButtonsForm\n      {...formItemLayout}\n      isFieldsChanged={true}\n      name=\"examForm\"\n      form={form}\n      initialValues={{\n        duration: 60,\n      }}\n      footer={\n        <BaseButtonsForm.Item>\n          <Button type=\"primary\" htmlType=\"submit\" loading={isLoading}>\n            {t('common.submit')}\n          </Button>\n        </BaseButtonsForm.Item>\n      }\n      onFinish={onFinish}\n    >\n      <BaseButtonsForm.Item\n        name=\"name\"\n        label={t('forms.examFormLabels.examName')}\n        rules={[{ required: true, message: t('forms.examFormLabels.examNameError') }]}\n      >\n        <Input placeholder=\"Exam Name\" />\n      </BaseButtonsForm.Item>\n\n      <BaseButtonsForm.Item\n        name=\"duration\"\n        label={t('forms.examFormLabels.examDuration')}\n        rules={[{ required: true, message: t('forms.examFormLabels.examNameError') }]}\n      >\n        <InputNumber min={60} max={180} placeholder=\"60\" />\n        <span> {t('forms.validationFormLabels.minutes')}</span>\n      </BaseButtonsForm.Item>\n\n      <BaseButtonsForm.Item\n        name=\"upload\"\n        label={t('forms.examFormLabels.questionFile')}\n        rules={[{ required: true, message: t('forms.examFormLabels.questionFileError') }]}\n        valuePropName=\"fileList\"\n        getValueFromEvent={normFile}\n      >\n        <Upload {...uploadProps}>\n          <Button type=\"default\" icon={<UploadOutlined />}>\n            {t('forms.validationFormLabels.clickToUpload')}\n          </Button>\n        </Upload>\n        <Text italic style={{ fontSize: 12 }}>\n          {t('forms.examFormLabels.downloadSample')}{' '}\n          <a href=\"/static/others/example.yml\" target=\"_blank\">\n            {' '}\n            here{' '}\n          </a>\n        </Text>\n      </BaseButtonsForm.Item>\n    </BaseButtonsForm>\n  );\n};\n","import React from 'react';\nimport { Col, Row } from 'antd';\nimport { useTranslation } from 'react-i18next';\nimport { PageTitle } from '@app/components/common/PageTitle/PageTitle';\nimport { Card } from '@app/components/common/Card/Card';\nimport { ExamForm } from '@app/components/forms/ExamForm/ExamForm';\n\nconst CreateExamPage: React.FC = () => {\n  const { t } = useTranslation();\n  return (\n    <>\n      <PageTitle>{t('common.examForms')}</PageTitle>\n      <Row gutter={[30, 30]}>\n        <Col xs={24} sm={24} xl={24}>\n          <Card id=\"exam form\" title={t('forms.examForm')} padding=\"1.25rem\">\n            <ExamForm />\n          </Card>\n        </Col>\n      </Row>\n    </>\n  );\n};\n\nexport default CreateExamPage;\n"],"sourceRoot":""}