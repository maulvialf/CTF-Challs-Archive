from sympy import mod_inverse
from Crypto.Util.number import *
from gmpy2 import iroot

def factor(n):
    p=int(iroot(n,2)[0])
    while p>1:
        if n%p==0:
            return p,(n/p)
        p-=1
    return N,1

s,t = factor(159672486280615069155194159038074980974036988108999065911574227748097637460982188656226393140983755856628114482329643211169050408030104011052298880123059045016285641082771428955873527878281049469550087121014112061790150160811868518485274191226313948671751647131542221398655298649136877922755796240341752938893L)
e = 0x10001
c = 48040328963945990924620280027181859567719937668344126926458142380423140402374819358687273569544307175742204622093498945469754583990415151043215779435545223182628407118492962709105072438687997490923072400918252555673335579484667713859480270700396293189471353060838435749671529275805106294762039108113272362923503821551280307743557275641504472921295586138789905357356850005264836590347773376402713171124330977931453179566439465764966768958018036572327400394648382083423155479023011290236202665551696409477304131077159157381041203393813344449696881648681071375765006411243682683042845372880173162571694854512234885179623835923202849139558294792364724135312725706915598848116769946289581410042625417773048661635359465823610781769086404577379889085723323837023347656992603899L
phi = (s-1)*(t-1)
d = mod_inverse(e,phi)
m = long_to_bytes(pow(c,d,s))
print(m)
